#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Dec 05, 2021 11:20:45 AM PKT  platform: Windows NT
from PIL import Image
from tkinter import Checkbutton, StringVar, filedialog, messagebox
from PIL import Image, ImageTk
import aes
import hashlib
from tkinter.constants import ANCHOR, NW, S
#from typing_extensions import IntVar
import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

class Toplevel1:
    def __init__(self, top=None):
        global enableAES
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("600x450+468+138")
        top.minsize(120, 1)
        top.maxsize(1540, 845)
        top.resizable(0, 0)
        top.title("Text In Image (Encode)")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.TFrame1 = ttk.Frame(top)
        self.TFrame1.place(relx=0.0, rely=0.0, relheight=1.011, relwidth=1.008)
        self.TFrame1.configure(relief='flat')
        self.TFrame1.configure(borderwidth="2")
        self.TFrame1.configure(relief="flat")
        self.TFrame1.configure(cursor="arrow")


        self.label1 = ttk.Label(self.TFrame1)
        self.label1.place(relx=0.033, rely=0.11, height=19
                                        , width=90)
        self.label1.configure(background="#d9d9d9")
        self.label1.configure(foreground="#000000")
        self.label1.configure(relief="flat")
        self.label1.configure(anchor='w')
        self.label1.configure(justify='left')
        self.label1.configure(text='''Original Image:''')


        self.label2 = ttk.Label(self.TFrame1)
        self.label2.place(relx=0.512, rely=0.11, height=19
                                        , width=90)
        self.label2.configure(background="#d9d9d9")
        self.label2.configure(foreground="#000000")
        self.label2.configure(relief="flat")
        self.label2.configure(anchor='w')
        self.label2.configure(justify='left')
        self.label2.configure(text='''Encoded Image:''')


        self.orignal_image_label = tk.Label(self.TFrame1)  # , image=openFile1(self.orignal_image_label))
        self.orignal_image_label.place(relx=0.033, rely=0.15, relheight=0.459
                                       , relwidth=0.446)
        self.orignal_image_label.configure(relief='groove')
        self.orignal_image_label.configure(foreground="black")
        self.orignal_image_label.configure(background="#edeef1")
        self.orignal_image_label.configure(cursor="hand2")
        self.orignal_image_label.configure(highlightbackground="#d9d9d9")
        self.orignal_image_label.configure(highlightcolor="black")

        self.encoded_image_label = tk.Label(self.TFrame1)  # tk.LabelFrame(self.TFrame1)
        self.encoded_image_label.place(relx=0.512, rely=0.15, relheight=0.459
                                       , relwidth=0.446)
        self.encoded_image_label.configure(relief='groove')
        self.encoded_image_label.configure(foreground="black")
        self.encoded_image_label.configure(background="#edeef1")
        self.encoded_image_label.configure(cursor="hand2")
        self.encoded_image_label.configure(highlightbackground="#d9d9d9")
        self.encoded_image_label.configure(highlightcolor="black")

        self.encode_button_label = ttk.Button(self.TFrame1, command=encodetext)
        self.encode_button_label.place(relx=0.512, rely=0.879, height=35
                                       , width=120)
        self.encode_button_label.configure(takefocus="")
        self.encode_button_label.configure(text='''Encode Text''')
        self.encode_button_label.configure(cursor="hand2")

        self.save_button_label = ttk.Button(self.TFrame1, command=saveImage)  # , command=inputtext)
        self.save_button_label.place(relx=0.760, rely=0.879, height=35
                                     , width=120)
        self.save_button_label.configure(takefocus="")
        self.save_button_label.configure(text='''Save''')
        self.save_button_label.configure(cursor="hand2")

        self.password_input_label = ttk.Entry(self.TFrame1)
        self.password_input_label.place(relx=0.628, rely=0.637, relheight=0.068
                                        , relwidth=0.331)
        self.password_input_label.configure(takefocus="")
        self.password_input_label.configure(cursor="ibeam")

        self.password_label = ttk.Label(self.TFrame1)
        self.password_label.place(relx=0.512, rely=0.637, height=19, width=64)
        self.password_label.configure(background="#d9d9d9")
        self.password_label.configure(foreground="#000000")
        self.password_label.configure(relief="flat")
        self.password_label.configure(anchor='w')
        self.password_label.configure(justify='left')
        self.password_label.configure(text='''Password:''')

        self.style.map('TCheckbutton', background=
        [('selected', _bgcolor), ('active', _ana2color)])
        self.enable_encryption = ttk.Checkbutton(self.TFrame1, variable=enableAES, offvalue=0, onvalue=1,
                                                 command=enableEncryption)
        self.enable_encryption.place(relx=0.512, rely=0.725, relwidth=0.149
                                     , relheight=0.0, height=21)
        # self.enable_encryption.configure(variable=autosave_support.tch61)
        self.enable_encryption.configure(text='''Enable AES''')
        self.enable_encryption.configure(cursor="hand2")

        self.text_input_label = tk.Text(self.TFrame1)
        self.text_input_label.grid(column=20, row=10)
        self.text_input_label.configure(font="Arial 10")
        self.text_input_label.place(relx=0.033, rely=0.659, relheight=0.286
                                    , relwidth=0.446)
        self.text_input_label.configure(takefocus="")
        self.text_input_label.configure(cursor="ibeam")

        self.text_label = ttk.Label(self.TFrame1)
        self.text_label.place(relx=0.033, rely=0.615, height=19, width=35)
        self.text_label.configure(background="#d9d9d9")
        self.text_label.configure(foreground="#000000")
        self.text_label.configure(relief="flat")
        self.text_label.configure(anchor='w')
        self.text_label.configure(justify='left')
        self.text_label.configure(text='''Text:''')

        self.import_button_label = ttk.Button(self.TFrame1, command=openFile)
        self.import_button_label.place(relx=0.110, rely=0.022, height=35
                                       , width=510)
        self.import_button_label.configure(takefocus="")
        self.import_button_label.configure(text='''Import''')
        self.import_button_label.configure(cursor="hand2")

        self.back_button_label = ttk.Button(self.TFrame1, command=lambda: destroy_Toplevel1("back"))
        self.back_button_label.place(relx=0.033, rely=0.022, height=35
                                       , width=40)
        self.back_button_label.configure(takefocus="")
        self.back_button_label.configure(text='''Back''')
        self.back_button_label.configure(cursor="hand2")

        self.encryption_key_input = ttk.Entry(self.TFrame1)
        self.encryption_key_input.place(relx=0.661, rely=0.791, relheight=0.068
                                        , relwidth=0.298)
        self.encryption_key_input.configure(state='disabled')
        self.encryption_key_input.configure(background="#000000")
        self.encryption_key_input.configure(takefocus="")
        self.encryption_key_input.configure(cursor="ibeam")

        self.encryption_key_label = ttk.Label(self.TFrame1)
        self.encryption_key_label.place(relx=0.512, rely=0.807, height=19
                                        , width=90)
        self.encryption_key_label.configure(background="#d9d9d9")
        self.encryption_key_label.configure(foreground="#000000")
        self.encryption_key_label.configure(relief="flat")
        self.encryption_key_label.configure(anchor='w')
        self.encryption_key_label.configure(justify='left')
        self.encryption_key_label.configure(text='''Encryption Key:''')
        self.encryption_key_label.configure(state='disabled')




def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global top, val, w, root, global_orignal_image, global_input_text, global_encoded_image, global_input_password, global_enableAes_button, global_encryptionKey_input, enableAES, returnMsg
    root = tk.Tk()
    enableAES = tk.IntVar()
    #autosave_support.set_Tk_var()
    top = Toplevel1(root)
    global_orignal_image = top.orignal_image_label
    global_encoded_image = top.encoded_image_label
    global_input_text = top.text_input_label
    global_input_password = top.password_input_label
    global_enableAes_button = top.enable_encryption
    global_encryptionKey_input = top.encryption_key_input
    root.mainloop()
    temp = returnMsg
    returnMsg = None
    return temp


w = None
top = None
photo = 0
photo2 = 0
filepath = ""
count = 0
global_input_password = 0
global_orignal_image = 0
global_encoded_image = 0
global_input_text = 0
global_enableAes_button = 0
global_encryptionKey_input = 0
enableAES = 0  # tk.IntVar()
returnMsg = None



def destroy_Toplevel1(option):
    global root, returnMsg
    returnMsg = option
    root.destroy()
    root = None
    return returnMsg



def openFile():
    global filepath, top
    filepath = filedialog.askopenfilename(defaultextension="*.*", filetypes=[(".jpg", ".jpg")])
    global photo
    photo = returnImage(filepath)
    top.orignal_image_label.configure(image=photo)


def returnImage(file):
    img = Image.open(file)
    img = img.resize((265, 200), Image.ANTIALIAS)
    img = ImageTk.PhotoImage(img)
    return img


def encodetext():
    global top, filepath, global_encoded_image, global_input_text, photo2, global_input_password, enableAES, global_encryptionKey_input
    password = top.password_input_label.get()
    if not photo:
        messagebox.showerror("Error", "Please Import Image First")
        return 0
    if len(password) == 0:
        messagebox.showerror("Error", "Password is not set.")
        return 0
    elif len(password) < 5:
        messagebox.showerror("Error", "Password length should be greater than 4")
        return 0
    
    password = hashlib.sha256(password.encode()).hexdigest()
    user_message = top.text_input_label.get("1.0", "end")[:-1]
    user_message = hashlib.sha256(user_message.encode()).hexdigest() + user_message
    if enableAES.get():
        if len(top.encryption_key_input.get()) == 0:
            messagebox.showerror("Error", "Encryption key is not set.")
            return 0
        elif len(top.encryption_key_input.get()) < 5:
            messagebox.showwarning("WARNING", "Encryption key should be greater than 5 letters")

        aestemp = aes.AESCipher(top.encryption_key_input.get())
        user_message = str(aestemp.encrypt(user_message))[2:-1]
    else:
        messagebox.showwarning("Warning", "Data is not encrypted")


    if len(top.text_input_label.get("1.0", "end")) - 1 == 0:
        messagebox.showwarning("No text", "Input field is empty")
    image1 = encode(user_message+password, filepath)
    image1.save("test.png", "PNG", optimize=True)
    photo2 = returnImage("test.png")
    top.encoded_image_label.configure(image=photo2)

    return image1


def enableEncryption():
    global top, global_encryptionKey_input, enableAES
    if enableAES.get():
        top.encryption_key_input.configure(state='enabled')
    else:
        top.encryption_key_input.configure(state='disabled')


def saveImage():
    global photo2
    if encodetext() != 0:
        path = filedialog.asksaveasfilename(defaultextension="*.*", filetypes=[('png', '.png')])
        if type(path) != None:
            image1 = Image.open("test.png")
            image1.save(path, "PNG", optimize=True)
            return 1
    return 0


def encode(message, file):
    img = Image.open(file)
    pixels = img.load()

    height, width = img.size
    if len(message)*8 > height*width*3:
        messagebox.showerror("Error","Message is too large")
        return 0
    text = ''.join(format(ord(i), '08b') for i in message)
    count = 0
    flag = False

    for i in range(height):
        for j in range(width):
            r, g, b = img.getpixel((i, j))
            if count == len(text):
                pixels[i, j] = (r, g, b)
                flag = True
                break
            # R
            if text[count] == '0':
                if r % 2 == 1:
                    r -= 1
            elif text[count] == '1':
                if r % 2 == 0:
                    r += 1
            count += 1

            if count == len(text):
                pixels[i, j] = (r, g, b)
                flag = True
                break
            # G
            if text[count] == '0':
                if g % 2 == 1:
                    g -= 1
            elif text[count] == '1':
                if g % 2 == 0:
                    g += 1
            count += 1

            if count == len(text):
                pixels[i, j] = (r, g, b)
                flag = True
                break

            # B
            if text[count] == '0':
                if b % 2 == 1:
                    b -= 1
            elif text[count] == '1':
                if b % 2 == 0:
                    b += 1
            count += 1

            pixels[i, j] = (r, g, b)

        if flag:
            break

    return img


if __name__=="__main__":
    vp_start_gui()