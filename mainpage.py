#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Dec 05, 2021 11:15:35 AM PKT  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def vp_start_gui():
    global returnValue
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Window (root)
    root.mainloop()
    temp=returnValue
    returnValue = None
    return temp

w = None
def destroy_Window():
    global w
    w.destroy()
    w = None

class Window:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x450+468+138")
        top.minsize(120, 1)
        top.maxsize(1540, 845)
        top.resizable(0,  0)
        top.title("Steganography Tool")
        top.configure(background="#ced5cf")
        top.configure(highlightbackground="#f0f0f0f0f0f0")
        top.configure(highlightcolor="black")

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.TFrame1 = ttk.Frame(top)
        self.TFrame1.place(relx=0.0, rely=0.0, relheight=1.011, relwidth=1.008)
        self.TFrame1.configure(relief='groove')
        self.TFrame1.configure(borderwidth="2")
        self.TFrame1.configure(relief="groove")

        self.Frame1 = tk.Frame(self.TFrame1)
        self.Frame1.place(relx=0.0, rely=0.0, relheight=0.993, relwidth=0.527)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#787bf5")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.label_stegnography = tk.Label(self.Frame1)
        self.label_stegnography.place(relx=0.219, rely=0.31, height=61
                , width=205)
        self.label_stegnography.configure(activebackground="#f9f9f9")
        self.label_stegnography.configure(activeforeground="black")
        self.label_stegnography.configure(background="#787bf5")
        self.label_stegnography.configure(disabledforeground="#a3a3a3")
        self.label_stegnography.configure(font="-family {Ink Free} -size 22 -weight bold")
        self.label_stegnography.configure(foreground="#eeeaea")
        self.label_stegnography.configure(highlightbackground="#d9d9d9")
        self.label_stegnography.configure(highlightcolor="black")
        self.label_stegnography.configure(text='''Steganography''')
        #self.label_stegnography.configure(textvariable=autosave_support.tool_name)

        self.label_tool = tk.Label(self.Frame1)
        self.label_tool.place(relx=0.219, rely=0.42, height=41, width=205)
        self.label_tool.configure(activebackground="#eeeaea")
        self.label_tool.configure(activeforeground="#eeeaea")
        self.label_tool.configure(background="#787bf5")
        self.label_tool.configure(disabledforeground="#a3a3a3")
        self.label_tool.configure(font="-family {Ink Free} -size 22 -weight bold")
        self.label_tool.configure(foreground="#eeeaea")
        self.label_tool.configure(highlightbackground="#d9d9d9")
        self.label_tool.configure(highlightcolor="black")
        self.label_tool.configure(text='''Tool''')
        #self.label_tool.configure(textvariable=autosave_support.tool_name2)

        self.TButton1 = ttk.Button(self.TFrame1, command=lambda: destroy("Text In Text (Encode/Decode)"))
        self.TButton1.place(relx=0.570, rely=0.1, height=45, width=225)
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''Text In Text (Encode/Decode)''')

        self.TButton2 = ttk.Button(self.TFrame1, command=lambda: destroy("Text In Image (Encode)"))
        self.TButton2.place(relx=0.570, rely=0.26, height=45, width=225)
        self.TButton2.configure(takefocus="")
        self.TButton2.configure(text='''Text In Image (Encode)''')

        self.TButton3 = ttk.Button(self.TFrame1, command=lambda: destroy("Text In Image (Decode)"))
        self.TButton3.place(relx=0.570, rely=0.42, height=45, width=225)
        self.TButton3.configure(takefocus="")
        self.TButton3.configure(text='''Text In Image (Decode)''')

        self.TButton3 = ttk.Button(self.TFrame1, command=lambda: destroy("Text / Audio / Image in Audio (Encode)"))
        self.TButton3.place(relx=0.570, rely=0.58, height=45, width=225)
        self.TButton3.configure(takefocus="")
        self.TButton3.configure(text='''Text / Audio / Image in Audio (Encode)''')

        self.TButton4 = ttk.Button(self.TFrame1, command=lambda: destroy("Text / Audio / Image in Audio (Decode)"))
        self.TButton4.place(relx=0.570, rely=0.74, height=45, width=225)
        self.TButton4.configure(takefocus="")
        self.TButton4.configure(text='''Text / Audio / Image in Audio (Decode)''')

returnValue = "none"
def destroy(option):
    global root, returnValue
    returnValue = option
    root.destroy()
